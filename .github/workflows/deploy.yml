name: Deploy Python Flask + React

on:
  push:
    branches: ["main"]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout code
      - uses: actions/checkout@v4

      # 2. Set up Python (Backend)
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      # 3. Install backend dependencies
      - name: Install Python dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt --no-cache-dir
          else
            pip install flask==2.3.2 flask-cors==3.0.10 flask-sqlalchemy==3.0.3 flask-bcrypt==1.0.1
          fi

      # 4. Set up Node.js (Frontend)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # 5. Install frontend dependencies
      - name: Install React dependencies
        run: |
          cd frontend
          npm install --force

      # 6. Build React app
      - name: Build React app
        run: |
          cd frontend
          npm run build

      # 7. Test Flask backend
      - name: Test Flask server
        run: |
          cd backend
          nohup python app.py > server.log 2>&1 &
          sleep 10
          curl -v http://localhost:5000/players || (cat server.log && exit 1)

      # 8. Deploy Frontend to Vercel
      - name: Deploy Frontend to Vercel
        if: github.ref == 'refs/heads/main'
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          cd frontend
          # Clear npm cache to avoid version conflicts
          npm cache clean --force
          # Install specific Vercel CLI version
          npm install -g vercel@32.5.1
          # Verify Vercel CLI version
          vercel --version
          # Link Vercel project
          echo -e "${VERCEL_ORG_ID}\n${VERCEL_PROJECT_ID}" | vercel link --token=${VERCEL_TOKEN} --yes
          # Deploy with prebuilt assets
          vercel deploy --prebuilt --prod --token=${VERCEL_TOKEN} --yes 2>&1 | tee deploy.log
          # Extract and display deployment URL
          DEPLOY_URL=$(grep -o 'https://[^ ]*\.vercel\.app' deploy.log | head -1)
          echo "deploy_url=${DEPLOY_URL}" >> $GITHUB_ENV
          echo "Deployment URL: ${DEPLOY_URL}"
