"""sync models with db

Revision ID: 6f61db8952d9
Revises: 34d68b1f922e
Create Date: 2025-07-02 14:27:17.869699

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '6f61db8952d9'
down_revision = '34d68b1f922e'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('access_requests')
    op.drop_table('client_competitors')
    with op.batch_alter_table('competitor_snapshots', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_handle_platform_date'))
        batch_op.drop_index(batch_op.f('idx_snapshot_date'))

    op.drop_table('competitor_snapshots')
    op.drop_table('tasks')
    op.drop_table('messages')
    op.drop_table('clients')
    op.drop_table('users')
    with op.batch_alter_table('competitor_benchmarks', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_client_benchmark_date'))

    op.drop_table('competitor_benchmarks')
    op.drop_table('content_files')
    op.drop_table('standup_tasks')
    op.drop_table('cards')
    op.drop_table('meetings')
    op.drop_table('channels')
    op.drop_table('projects')
    op.drop_table('players')
    op.drop_table('channel_reads')
    op.drop_table('channel_members')
    with op.batch_alter_table('access_request', schema=None) as batch_op:
        batch_op.drop_column('requested_at')

    with op.batch_alter_table('card', schema=None) as batch_op:
        batch_op.add_column(sa.Column('type', sa.String(length=64), nullable=False))
        batch_op.add_column(sa.Column('title', sa.String(length=128), nullable=False))
        batch_op.add_column(sa.Column('subtitle', sa.String(length=256), nullable=True))
        batch_op.add_column(sa.Column('icon', sa.String(length=32), nullable=True))
        batch_op.add_column(sa.Column('client_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True))
        batch_op.create_foreign_key(None, 'client', ['client_id'], ['id'])

    with op.batch_alter_table('channel', schema=None) as batch_op:
        batch_op.drop_column('is_dm')

    with op.batch_alter_table('channel_member', schema=None) as batch_op:
        batch_op.drop_column('user_id')

    with op.batch_alter_table('client_access', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('_client_viewer_uc'), type_='unique')
        batch_op.drop_constraint(batch_op.f('client_access_client_id_fkey'), type_='foreignkey')
        batch_op.drop_constraint(batch_op.f('client_access_viewer_user_id_fkey'), type_='foreignkey')
        batch_op.drop_column('can_approve')
        batch_op.drop_column('created_at')
        batch_op.drop_column('client_id')
        batch_op.drop_column('viewer_user_id')
        batch_op.drop_column('can_comment')
        batch_op.drop_column('can_view')
        batch_op.drop_column('updated_at')

    with op.batch_alter_table('content_calendar', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('content_calendar_client_id_fkey'), type_='foreignkey')
        batch_op.drop_constraint(batch_op.f('content_calendar_created_by_fkey'), type_='foreignkey')
        batch_op.drop_column('status')
        batch_op.drop_column('client_feedback')
        batch_op.drop_column('media_url')
        batch_op.drop_column('hashtags')
        batch_op.drop_column('created_by')
        batch_op.drop_column('approval_status')
        batch_op.drop_column('title')
        batch_op.drop_column('text_copy')
        batch_op.drop_column('created_at')
        batch_op.drop_column('description')
        batch_op.drop_column('is_pinned')
        batch_op.drop_column('client_id')
        batch_op.drop_column('client_approved')
        batch_op.drop_column('content_type')
        batch_op.drop_column('platform')
        batch_op.drop_column('scheduled_date')
        batch_op.drop_column('updated_at')

    with op.batch_alter_table('content_feedback', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('content_feedback_client_id_fkey'), type_='foreignkey')
        batch_op.drop_constraint(batch_op.f('content_feedback_user_id_fkey'), type_='foreignkey')
        batch_op.drop_constraint(batch_op.f('content_feedback_content_id_fkey'), type_='foreignkey')
        batch_op.drop_column('comment')
        batch_op.drop_column('created_at')
        batch_op.drop_column('content_id')
        batch_op.drop_column('client_id')
        batch_op.drop_column('approval_status')
        batch_op.drop_column('updated_at')
        batch_op.drop_column('user_id')

    with op.batch_alter_table('player', schema=None) as batch_op:
        batch_op.drop_column('name')

    with op.batch_alter_table('project', schema=None) as batch_op:
        batch_op.drop_column('name')

    with op.batch_alter_table('task', schema=None) as batch_op:
        batch_op.drop_column('name')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('task', schema=None) as batch_op:
        batch_op.add_column(sa.Column('name', sa.VARCHAR(length=128), autoincrement=False, nullable=False))

    with op.batch_alter_table('project', schema=None) as batch_op:
        batch_op.add_column(sa.Column('name', sa.VARCHAR(length=128), autoincrement=False, nullable=False))

    with op.batch_alter_table('player', schema=None) as batch_op:
        batch_op.add_column(sa.Column('name', sa.VARCHAR(length=128), autoincrement=False, nullable=False))

    with op.batch_alter_table('content_feedback', schema=None) as batch_op:
        batch_op.add_column(sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('approval_status', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('content_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key(batch_op.f('content_feedback_content_id_fkey'), 'content_calendar', ['content_id'], ['id'])
        batch_op.create_foreign_key(batch_op.f('content_feedback_user_id_fkey'), 'users', ['user_id'], ['id'])
        batch_op.create_foreign_key(batch_op.f('content_feedback_client_id_fkey'), 'clients', ['client_id'], ['id'])

    with op.batch_alter_table('content_calendar', schema=None) as batch_op:
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('scheduled_date', sa.DATE(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('platform', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('content_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('client_approved', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('is_pinned', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('text_copy', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('approval_status', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('hashtags', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('media_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('client_feedback', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
        batch_op.create_foreign_key(batch_op.f('content_calendar_created_by_fkey'), 'users', ['created_by'], ['id'])
        batch_op.create_foreign_key(batch_op.f('content_calendar_client_id_fkey'), 'clients', ['client_id'], ['id'])

    with op.batch_alter_table('client_access', schema=None) as batch_op:
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('can_view', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('can_comment', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('viewer_user_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('can_approve', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key(batch_op.f('client_access_viewer_user_id_fkey'), 'users', ['viewer_user_id'], ['id'])
        batch_op.create_foreign_key(batch_op.f('client_access_client_id_fkey'), 'clients', ['client_id'], ['id'])
        batch_op.create_unique_constraint(batch_op.f('_client_viewer_uc'), ['client_id', 'viewer_user_id'], postgresql_nulls_not_distinct=False)

    with op.batch_alter_table('channel_member', schema=None) as batch_op:
        batch_op.add_column(sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True))

    with op.batch_alter_table('channel', schema=None) as batch_op:
        batch_op.add_column(sa.Column('is_dm', sa.BOOLEAN(), autoincrement=False, nullable=True))

    with op.batch_alter_table('card', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('created_at')
        batch_op.drop_column('client_id')
        batch_op.drop_column('icon')
        batch_op.drop_column('subtitle')
        batch_op.drop_column('title')
        batch_op.drop_column('type')

    with op.batch_alter_table('access_request', schema=None) as batch_op:
        batch_op.add_column(sa.Column('requested_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))

    op.create_table('channel_members',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('channel_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('joined_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['channel_id'], ['channels.id'], name=op.f('channel_members_channel_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('channel_members_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('channel_members_pkey'))
    )
    op.create_table('channel_reads',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('channel_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('last_read_message_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['channel_id'], ['channels.id'], name=op.f('channel_reads_channel_id_fkey')),
    sa.ForeignKeyConstraint(['last_read_message_id'], ['messages.id'], name=op.f('channel_reads_last_read_message_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('channel_reads_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('channel_reads_pkey')),
    sa.UniqueConstraint('channel_id', 'user_id', name=op.f('_channel_user_uc'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('players',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('dream', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('players_pkey'))
    )
    op.create_table('projects',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('projects_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='projects_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('channels',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('channels_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('is_dm', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='channels_created_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='channels_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('meetings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('date', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('start_time', sa.VARCHAR(length=5), autoincrement=False, nullable=False),
    sa.Column('end_time', sa.VARCHAR(length=5), autoincrement=False, nullable=False),
    sa.Column('organizer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('invitee_ids', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['organizer_id'], ['users.id'], name=op.f('meetings_organizer_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('meetings_pkey'))
    )
    op.create_table('cards',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('type', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('subtitle', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('icon', sa.VARCHAR(length=8), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], name=op.f('cards_client_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('cards_pkey'))
    )
    op.create_table('standup_tasks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('client', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('day', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('time', sa.VARCHAR(length=5), autoincrement=False, nullable=False),
    sa.Column('task', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=32), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('blocker', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('streak', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('standup_tasks_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('standup_tasks_pkey'))
    )
    op.create_table('content_files',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('content_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('filename', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('original_filename', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('mime_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['content_id'], ['content_calendar.id'], name=op.f('content_files_content_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('content_files_pkey'))
    )
    op.create_table('competitor_benchmarks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('competitor_handle', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('platform', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('benchmark_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('follower_growth_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('engagement_growth_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('posts_frequency', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('follower_gap', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('engagement_gap', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('is_trending', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('performance_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], name=op.f('competitor_benchmarks_client_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('competitor_benchmarks_pkey'))
    )
    with op.batch_alter_table('competitor_benchmarks', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_client_benchmark_date'), ['client_id', 'benchmark_date'], unique=False)

    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(length=120), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('is_admin', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=50), server_default=sa.text("'production'::character varying"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_type', sa.VARCHAR(length=32), autoincrement=False, nullable=True),
    sa.Column('department', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], name='users_client_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('clients',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('clients_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('industry', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('contact', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=120), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('website', sa.VARCHAR(length=120), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=32), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='clients_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('messages',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('channel_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('parent_message_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['channel_id'], ['channels.id'], name=op.f('messages_channel_id_fkey')),
    sa.ForeignKeyConstraint(['parent_message_id'], ['messages.id'], name=op.f('messages_parent_message_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('messages_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('messages_pkey'))
    )
    op.create_table('tasks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('content', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('done', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('tasks_project_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('tasks_pkey'))
    )
    op.create_table('competitor_snapshots',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('handle', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('platform', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('snapshot_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('followers_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('following_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('posts_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('avg_likes', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('avg_comments', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('avg_shares', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('engagement_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bio', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('profile_pic_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('verified', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('scraped_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('scrape_success', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('competitor_snapshots_pkey'))
    )
    with op.batch_alter_table('competitor_snapshots', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_snapshot_date'), ['snapshot_date'], unique=False)
        batch_op.create_index(batch_op.f('idx_handle_platform_date'), ['handle', 'platform', 'snapshot_date'], unique=False)

    op.create_table('client_competitors',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('handle', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('platform', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('display_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('added_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['added_by'], ['users.id'], name=op.f('client_competitors_added_by_fkey')),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], name=op.f('client_competitors_client_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('client_competitors_pkey')),
    sa.UniqueConstraint('client_id', 'handle', 'platform', name=op.f('unique_client_competitor'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('access_requests',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(length=120), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('requested_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=32), autoincrement=False, nullable=True),
    sa.Column('user_type', sa.VARCHAR(length=32), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('access_requests_pkey')),
    sa.UniqueConstraint('email', name=op.f('access_requests_email_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    # ### end Alembic commands ###
